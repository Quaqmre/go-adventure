package main

import (
	"image"
	"image/png"
	"log"
	"math"
	"os"
)

const (
	output     = "out.png"
	width      = 2048
	height     = 2048
	numWorkers = 8
)

func main() {
	filename := "out.png"
	infile, err := os.Open("./" + filename)
	if err != nil {
		// replace this with real error handling
		panic(err.Error())
	}
	defer infile.Close()

	// Decode will figure out what type of image is in the file on its own.
	// We just have to be sure all the image packages we want are imported.
	src, _ := png.Decode(infile)
	if err != nil {
		// replace this with real error handling
		panic(err.Error())
	}

	// Create a new grayscale image
	bounds := src.Bounds()
	w, h := bounds.Max.X, bounds.Max.Y
	gray := image.NewGray(image.Rect(0, 0, w, h))

	for x := 0; x < w; x++ {
		for y := 0; y < h; y++ {
			oldColor := src.At(x, y)
			a, b := ConvertCor(x, y)
			nx, ny := a*math.Cos(0.523598776)-b*math.Sin(0.523598776), a*math.Sin(0.523598776)+b*math.Cos(0.523598776)
			t, k := ConvertNorm(nx, ny)
			gray.Set(t, k, oldColor)
		}
	}
	f, err := os.Create("dÃ¶n.png")
	if err != nil {
		log.Fatal(err)
	}
	if err = png.Encode(f, gray); err != nil {
		log.Fatal(err)
	}

	// w, h := bounds.Max.X, bounds.Max.Y
}
func ConvertCor(x, y int) (float64, float64) {
	var nx float64
	var ny float64
	nx = float64(x) - 1024
	ny = 1024 - float64(y)

	return nx, ny
}
func ConvertNorm(x, y float64) (int, int) {
	var px float64
	var py float64
	px = 1024 + x
	py = 1024 - y
	return int(px), int(py)
}
