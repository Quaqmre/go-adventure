package main

import (
	"fmt"
	"reflect"
)

var (
	sum int
)

func main() {
	t := []int{1, 2, 3}
	value := summer(1, 2, 3, t) // summer içerisine aldığı interfaceleri düzenli hale getirerek bir int arrayi oluşyurur
	for _, i := range value {
		sum += i
	}
	fmt.Println(sum)
}

func summer(items ...interface{}) []int { //içerisine düzendiz interface alır ve bunları düzenlemeye çalışır
	ret := []int{}
	for _, item := range items {

		itemValue := reflect.ValueOf(item) // bir atanmış değeri alır
		itemType := itemValue.Type()       // atanmış değer typını alır

		var intInt int
		mValue := reflect.ValueOf(&intInt).Elem() // dönüştürülmek istenen değerinin value alanı oluşturulur
		mType := mValue.Type()                    // oluşturulan value alanına atanabilir typı alır
		if itemType.ConvertibleTo(mType) {        // oluşturulan alanın typına itemimiz dönüştürülebiliyor mu check edilir.
			mValue.Set(itemValue.Convert(mType)) // açılan alana gelen item valuesi set edilir
			ret = append(ret, intInt)            // ve bu değer arraye eklenir açılan alanlar intInt referansyla ilerlemekteydi.
			continue
		}
		switch itemType.Kind() { // eğer gelen itemimiz int değilse base typına bakarız
		case reflect.Slice, reflect.Array:
			args := make([]interface{}, itemValue.Len())
			for i := 0; i < itemValue.Len(); i++ {
				args[i] = itemValue.Index(i).Interface()
			}
			ret = append(ret, summer(args...)...)
		default:
			panic("I dont Know My friends")
		}
	}
	return ret
}
