package main

// type F interface {
// 	f()
// }
// type S2 struct{}

// type S1 struct{}

// func (s S1) f() {}

// func (s *S2) f() {}
// func main() {

// 	s1Val := S1{}
// 	s1Ptr := &S1{}
// 	s2Val := S2{}
// 	s2Ptr := &S2{}

// 	var i F
// 	i = s1Val
// 	i = s1Ptr
// 	i = s2Val //Doesnt compile
// 	i = s2Ptr
// // -----------------------
// 	mu := new(sync.Mutex)
// 	var muu sync.Mutex
// }
// // -----------------------

// type smap struct {
// 	sync.Mutex // only for unexported types

// 	data map[string]string
// }
// //It's doesnt matter export or unexport Mutex u can use it directly or call it mu
// type SMap struct {
// 	mu sync.Mutex

// 	data map[string]string
//   }
// // ------------------------

// func main() { // //   Keep in mind that users can modify a map or slice you received as an argument if you store a reference to it.
// 	//It means when u copyed maps or slies to the value ,It had pass referance with value ,
// 	//And if u changed any value in any slises ,It had changed eveywhere
// 	tripes := make([]int, 10)
// 	willcopy := make([]int, 10)
// 	tripes[0] = 2
// 	tripes[1] = 3

// 	willcopy = tripes
// 	willcopy[0] = 12
// 	fmt.Println(willcopy)
// 	fmt.Println(tripes) // this is bad way ,u should copy all values in the new slice

// 	newCopySlice := make([]int, len(tripes))
// 	copy(newCopySlice, tripes) // it will copy with new referances
// 	newCopySlice[0] = 31
// 	fmt.Println(newCopySlice)
// 	fmt.Println(tripes)
// }
// // ------------------------
// // Similarly, be wary of user modifications to maps or slices exposing internal state.
// Ä°f u have a slice or map ,Maps and slices store value with by referance ,and if u want copy it another varable u
//shoul take a snopshot the another slice , and dont pass the referance it,
// func (s *Stats) Snapshot() map[string]int { // it will return with referance and this area cant protect with mutex,
// 	s.mu.Lock()
// 	defer s.mu.Unlock()

// 	return s.counters
//   }

//   func (s *Stats) Snapshot() map[string]int {//It will return with new referances and u can change it any time,and u need to mutex any more cause it is new area on the memory
// 	s.mu.Lock()
// 	defer s.mu.Unlock()

// 	result := make(map[string]int, len(s.counters))
// 	for k, v := range s.counters {
// 	  result[k] = v
// 	}
// 	return result
//   }
// // ------------------------
