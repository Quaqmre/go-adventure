package main

import (
	"fmt"
	"sync"
)

// type smap struct {
// 	sync.Mutex // only for unexported types isim ataması yapılmadan kullanlabilir.

// 	data map[string]string
// }

// func newSMap() *smap {
// 	return &smap{
// 		data: make(map[string]string),
// 	}
// }

// func (m *smap) Get(k string) string {
// 	m.Lock()
// 	defer m.Unlock()

// 	return m.data[k]
// }

type Stats struct {
	mu       sync.Mutex
	counters map[string]int
}

// Snapshot returns the current stats.
func (s *Stats) Snapshot() map[string]int {
	s.mu.Lock()
	defer s.mu.Unlock()

	return s.counters
}
func (s *Stats) SnapshotCopy() map[string]int {
	s.mu.Lock()
	defer s.mu.Unlock()

	result := make(map[string]int, len(s.counters))
	for k, v := range s.counters {
		result[k] = v
	}
	return result
}

// snapshot is no longer protected by the mutex, so any
// access to the snapshot is subject to data races.
func main() {
	var stats Stats
	stats.counters = map[string]int{"deneme": 1, "deneme2": 2}
	result := make(map[string]int)
	resultCopy := make(map[string]int)
	result = stats.Snapshot()
	resultCopy = stats.SnapshotCopy()
	fmt.Println(result)
	fmt.Println(resultCopy)
}
